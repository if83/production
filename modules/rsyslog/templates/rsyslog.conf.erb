# rsyslog configuration file

# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html

#### MODULES ####

<% if @hosttype['client'] -%>
module(load="imfile" Mode="inotify")
<% end -%>

# The imjournal module below is now used as a message source instead of imuxsock.
$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
$ModLoad imjournal # provides access to the systemd journal
#$ModLoad imklog # reads kernel messages (the same are read from journald)
#$ModLoad immark  # provides --MARK-- message capability

<% if @hosttype['server'] -%>
<% if @log_proto['udp'] -%>
# provides UDP syslog reception
module(load="imudp")

<% elsif @log_proto['tcp'] -%>
# provides TCP syslog reception
module(load="imtcp")
<% end -%>

# provides mysql db connectiom
# $ModLoad ommysql
# *.* :ommysql:<%= @db_host %>,<%= @db_name %>,<%= @db_user %>,<%= @db_pass %>
<% end -%>

#### GLOBAL DIRECTIVES ####

# Where to place auxiliary files
$WorkDirectory /var/lib/rsyslog

# Use default timestamp format
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# File syncing capability is disabled by default. This feature is usually not required,
# not useful and an extreme performance hit
#$ActionFileEnableSync on

# Include all config files in /etc/rsyslog.d/
$IncludeConfig /etc/rsyslog.d/*.conf

# Turn off message reception via local log socket;
# local messages are retrieved through imjournal now.
$OmitLocalLogging on

# File to store the position in the journal
$IMJournalStateFile imjournal.state

<% if @hosttype['server'] -%>
template(name="TmplMsg" type="string"
string="/var/log/remote/%HOSTNAME%/%PROGRAMNAME:::secpath-replace%.log"
)

ruleset(name="RemoteApps"){
    *.* action(type="omfile" DynaFile="TmplMsg")
}

<% if @log_proto['tcp'] -%>
input(type="imtcp" port="<%= @dport %>" ruleset="RemoteApps")
<% elsif @log_proto['udp'] -%>
input(type="imudp" port="<%= @dport %>" ruleset="RemoteApps")
<% end -%>
<% elsif @hosttype['client'] -%>
template (name="SuffixForwardFormat" type="string"
string="<%%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%%$.suffix%%msg:::sp-if-no-1st-sp%%msg%")

ruleset(name="sendToLogserver") {
    action(type="omfwd" Target="<%= @log_serv %>" Port="<%= @dport %>" Protocol="<%= @log_proto %>" Template="SuffixForwardFormat" resendlastmsgonreconnect="on" queue.filename="forwarding" queue.size="1000000" queue.type="LinkedList" queue.saveonshutdown="on")
}

ruleset(name="myapp_logs") {
    # re_extract(expr, re, match, submatch, no-found)
    set $.suffix=replace(re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "common.log"), ".log", "");
    call sendToLogserver
}
<% end -%>

#### RULES ####

# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
*.info;mail.none;authpriv.none;cron.none                /var/log/messages

# The authpriv file has restricted access.
authpriv.*                                              /var/log/secure

# Log all the mail messages in one place.
mail.*                                                  /var/log/maillog

# Log cron stuff
cron.*                                                  /var/log/cron

# Everybody gets emergency messages
*.emerg                                                 :omusrmsg:*

# Save news errors of level crit and higher in a special file.
uucp,news.crit                                          /var/log/spooler

# Save boot messages also to boot.log
local7.*                                                /var/log/boot.log

<% if @hosttype['client'] -%>
# ### begin forwarding rule ###
# The statement between the begin ... end define a SINGLE forwarding
# rule. They belong together, do NOT split them. If you create multiple
# forwarding rules, duplicate the whole block!
# Remote Logging (we use TCP for reliable delivery)
#
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.
<% if @log_proto['tcp'] -%>
$ActionQueueFileName fwdRule1     # unique name prefix for spool files
$ActionQueueMaxDiskSpace 1g       # 1gb space limit (use as much as possible)
$ActionQueueSaveOnShutdown on     # save messages to disk on shutdown
$ActionQueueType LinkedList       # run asynchronously
$ActionResumeRetryCount -1        # infinite retries if host is down
<% end -%>
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
*.* <% if @log_proto['tcp'] -%>@<% end -%>@<%= @log_serv %>:<%= @dport %>

# ### end of the forwarding rule ###
<% end -%>
